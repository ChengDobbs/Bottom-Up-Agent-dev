project_name: 'GymAgent'
game_name: 'Crafter'
run_name: 'crafter - discrete - exploration'

# Execution Mode Configuration
# Options: 'standard', 'parallel_interactive', 'batch', 'debug'
mode: 'parallel_interactive'  # Default mode for Crafter gameplay

# Simple Mode: Bypass complex initialization to avoid GUI freezing
# Set to true to skip: WandB Logger, Eye module, CLIP models, Detector
simple_mode: False

close_explore: False
close_reflexion: False
close_reset: False
is_base: False
use_mcp: True
mcp:
  max_iter: 6  # More iterations for complex environment

result_path: 'results'
exec_duration: 2.0  # Longer wait time for complex decisions

teacher_type: 'Human'  # Human interaction for exploration guidance

brain:
  # base_model: 'claude-3-7-sonnet-20250219' # Previous model
  base_model: 'claude-sonnet-4-20250514' # Now supported with flexible claude model detection
  evaluate_model: 'gpt-4o'
  uct_c: 5.0
  uct_threshold: 0.0

# GUI Configuration (unified with crafter_interactive_launcher)
gui:
  resolution: low               # Use crafter_interactive_launcher preset: tiny/small/low/medium/high/ultra
  width: 400                    # Explicit width override (optional, [custom])
  height: 400                   # Explicit height override (optional, [custom])
  fps: 30                       # Frames per second
  title: "Crafter"
  resizable: false
  fullscreen: false
  fps_limit: 60
  vsync: true
  
# Gym Environment Configuration
gym:
  env_type: "crafter_pypi"    # Use direct Crafter.Env() creation
  env_id: "CrafterReward-v1"    # Identifier for logging
  render_mode: "rgb_array"       # Use rgb_array to avoid Crafter's native window
  max_episode_steps: 10000      # Long episodes for exploration
  
  # Action and observation spaces (Crafter specific)
  action_space:
    type: "Discrete"
    n: 17  # Crafter has 17 discrete actions
    actions: ["noop", "move_left", "move_right", "move_up", "move_down", 
              "do", "sleep", "place_stone", "place_table", "place_furnace", 
              "place_plant", "make_wood_pickaxe", "make_stone_pickaxe", 
              "make_iron_pickaxe", "make_wood_sword", "make_stone_sword", "make_iron_sword"]
    
  observation_space:
    type: "Box"
    shape: [64, 64, 3]  # RGB image observations
    dtype: "uint8"
    low: 0
    high: 255
    
  # Crafter specific settings
  crafter_settings:
    area: [64, 64]      # World size
    grid_size: [7, 9]  # Grid dimensions [rows, cols] - 7x9 main view
    inventory_size: [2, 9]  # Inventory grid size (width, height)
    seed: null          # Random seed (null for random)
    
  # Step control settings
  step_settings:
    max_total_steps: 30000    # Maximum total steps across all episodes
    max_episode_steps: 10000  # Maximum steps per episode (Crafter episodes can run indefinitely)

# Achievement tracking for Crafter
achievements:
  track_achievements: True
  achievement_list:
    - 'collect_coal'
    - 'collect_diamond'
    - 'collect_drink'
    - 'collect_iron'
    - 'collect_sapling'
    - 'collect_stone'
    - 'collect_wood'
    - 'defeat_skeleton'
    - 'defeat_zombie'
    - 'eat_cow'
    - 'eat_plant'
    - 'make_iron_pickaxe'
    - 'make_iron_sword'
    - 'make_stone_pickaxe'
    - 'make_stone_sword'
    - 'make_wood_pickaxe'
    - 'make_wood_sword'
    - 'place_furnace'
    - 'place_plant'
    - 'place_stone'
    - 'place_table'
    - 'wake_up'

# Dynamic Task Planning Configuration
task_planning:
  enabled: True
  planning_mode: 'adaptive'  # Options: 'progressive', 'adaptive', 'achievement_based'
  
  # Adaptive task selection based on current state (generic approach)
  adaptive_planning:
    enabled: True
    context_factors:
      - 'current_inventory'  # What items player currently has
      - 'visible_objects'    # What objects are visible in current scene
      - 'achievement_progress'  # Which achievements have been completed
      - 'health_status'      # Current health and hunger levels (if applicable)
      - 'time_of_day'        # Day/night cycle considerations (if applicable)
    
    # Generic fallback tasks when no specific goal is clear
    fallback_tasks:
      exploration: "Explore the environment to discover new resources and opportunities"
      resource_gathering: "Collect available resources in the environment"
      survival: "Focus on maintaining character status and avoiding dangers"
      interaction: "Interact with available objects and elements in the environment"
  
  # Task selection strategy (generic configuration)
  selection_strategy:
    method: 'context_aware'  # Options: 'priority_based', 'context_aware', 'mixed'
    context_weight: 0.7      # Higher weight on current context for adaptive behavior
    randomization: 0.15      # Moderate randomness to encourage exploration
    
  # Generic task generation settings
  task_generation:
    enable_dynamic_tasks: True     # Generate tasks based on current state
    max_task_history: 10          # Remember recent tasks to avoid repetition
    task_diversity_threshold: 0.3  # Minimum difference between consecutive tasks
    achievement_driven: True       # Use achievements to guide task selection

# Grid configuration for Eye module
grid:
  rows: 7      # Grid rows (matches crafter_settings.grid_size[0])
  cols: 9      # Grid columns (matches crafter_settings.grid_size[1])
  detection_size: 64
  resolution: 64

# Long-term memory configuration
long_memory:
  sim_threshold: 0.80  # Lower threshold for diverse exploration

# Vector database configuration
vector_memory:
  similarity_threshold: 0.88  # Lower threshold for diverse states
  embedding_type: "open_clip"
  clip_model: "ViT-B/32"
  vector_dim: 512
  batch_size: 32
  
  image_preprocessing:
    target_size: [224, 224]
    normalize: true
    
  similarity_matching:
    high_threshold: 0.85  # Adjusted for exploration
    medium_threshold: 0.65
    low_threshold: 0.45
    
  deduplication:
    enabled: true
    spatial_threshold: 15  # Larger threshold for world exploration
    content_similarity: 0.75
    
  storage_optimization:
    compress_vectors: false
    pca_components: 256
    cache_size: 2000  # Larger cache for complex environment
    
  retrieval:
    default_top_k: 15
    max_results: 100
    enable_reranking: true

# Detector configuration
detector:
  type: 'crafter_api'  # Options: 'sam', 'omni', 'template', 'crafter_api'
  clip_model: 'ViT-B/32'
  
  # Crafter API detector configuration (for structured game state)
  crafter_api:
    grid_size: [7, 9]  # Grid dimensions [rows, cols] - 7x9 main view
    inventory_size: [2, 9]  # Inventory grid size (width, height)
    unit_size: 64   # Size of each grid cell in pixels - matches environment creation
    enable_semantic_view: true  # Include all world objects in detection
    
    # Detection method selection
    detection_method: 'direct_api'  # Options: 'similarity_matching', 'direct_api', 'hybrid'
    
    # Similarity matching configuration
    similarity_matching:
      enabled: false                    # Disable similarity matching to avoid CLIP
      template_source: 'crafter_assets'  # Use crafter asset templates
      similarity_threshold: 0.8  # Minimum similarity score (0.0-1.0)
      use_color_analysis: true   # Enable RGB color analysis as fallback
      cache_templates: true      # Cache loaded templates for performance
      
    # Direct API configuration  
    direct_api:
      enabled: true
      use_world_state: true      # Access world._world for material info
      use_player_state: true     # Access player inventory and position
      include_objects: true      # Include dynamic objects (creatures, items)
      fallback_to_similarity: false     # Disable fallback to avoid CLIP

# Database path configuration
database:
  sqlite_path: "./data/sql/crafter.db"
  vector_db_path: "./data/vector"
  backup_enabled: true
  backup_interval: 1800  # More frequent backups

# Logging configuration
logging:
  level: "INFO"
  file: "./logs/crafter_agent.log"
  max_size: "50MB"  # Larger log files for complex environment
  backup_count: 10

# Performance configuration
performance:
  use_gpu: false
  num_workers: 6  # More workers for complex processing
  prefetch_factor: 3
  pin_memory: true

# MCP Tools Configuration
mcp_tools:
  # Environment-specific tool configuration
  environment_tools:
    - "query_environment"  # Query current UI environment information
  
  # Skill management tools
  skill_tools:
    - "select_skill"       # Select the best skill from candidates
    - "refine_skill"       # Refine selected skill
  
  # Operation execution tools  
  operation_tools:
    - "keyboard"               # Type text input
  
  # Crafter-specific tools (can be different for other games)
  game_specific_tools:
    - "move_actions"        # Movement actions (up, down, left, right)
    - "craft_actions"       # Crafting actions (make tools, place items)
    - "interact_actions"    # Interaction actions (do, sleep)
    
  # Tool availability by mode
  exploration_mode:
    enabled_tools: ["query_environment", "move_actions", "interact_actions"]
  
  skill_learning_mode:
    enabled_tools: ["query_environment", "select_skill", "Type", "Finished"]
  
  full_mode:
    enabled_tools: "all"  # Use all available tools

# Automatic gameplay configuration
automatic_gameplay:
  enabled: true                    # Enable automatic skill generation
  scene_analysis_interval: 5       # Steps between scene analysis
  max_automatic_skills: 5          # Maximum skills in automatic queue
  skill_generation_enabled: true   # Enable skill generation from scene analysis
  
  # Enhanced skill generation system (inspired by BottomUpAgent)
  skill_generation:
    enabled: true                  # Enable intelligent skill generation
    threshold: 3                   # Generate skill after N successful operations
    evolution_enabled: true        # Enable skill evolution and optimization
    fitness_threshold: 2.0         # Minimum fitness for skill survival
    observation_threshold: 4       # Minimum observations before evolution
    max_skills_per_cluster: 10     # Maximum skills per cluster
    evolution_interval: 50         # Evolve skills every N steps
    
    # Skill generation methods
    methods:
      screen_change_detection: true    # Generate skills from screen changes
      operation_sequence_analysis: true # Generate skills from operation sequences
      context_aware_generation: true   # Use LLM for context-aware skill generation
      
    # Skill quality control
    quality_control:
      min_operation_count: 2         # Minimum operations for skill generation
      max_operation_count: 8         # Maximum operations for skill generation
      success_rate_threshold: 0.6    # Minimum success rate for skill retention
      
  # Scene detection configuration
  scene_detection:
    complexity_thresholds:
      simple: 3      # Less than 3 objects = simple scene
      moderate: 8    # 3-8 objects = moderate scene
      # 8+ objects = complex scene
    
    context_history_size: 10       # Number of recent scenes to keep
    new_object_threshold: 1        # Minimum new objects to trigger skill generation
    exploration_skill_threshold: 5 # Object count to trigger exploration skills

# Experimental features
experimental:
  multimodal_fusion: true   # Enable for rich visual environment
  semantic_clustering: true # Enable for object categorization
  temporal_tracking: true   # Enable for sequence learning

# Display configuration for crafter rendering
eye:
  width: 400
  height: 400

# Crafter recording configuration
recording:
  save_stats: True
  save_video: False  # Disable to save space
  save_episode: True
  logdir: './crafter_logs'